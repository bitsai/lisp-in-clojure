eval.clj implements eval from Paul Graham's "The Roots of Lisp" paper:
http://lib.store.yahoo.net/lib/paulgraham/jmc.ps

extras.clj adds additional functions by eval'ing defun expressions:
subst
caar
cadr
cadar
caddr
caddar
tuple
null
and
not
append
pair
assoc
eval (yep, you can run a Lisp interpreter inside the interpreter!)
evcon
evlis

reader.clj implements parsing of expressions into nested lists.

repl.clj (clj repl.clj) launches a simple REPL (enter "exit" to quit).

tests.clj (clj tests.clj) tests the interpreter using examples from Paul Graham's paper.

Inspired by:
http://onestepback.org/index.cgi/Tech/Ruby/LispInRuby.red
